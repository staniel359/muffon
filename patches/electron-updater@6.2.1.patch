diff --git a/out/AppImageUpdater.js b/out/AppImageUpdater.js
index 96048f90c30aebc10a3b92eed067f2608010ac24..1d89f4f196d0f094705fc90a5251f164f0ab9443 100644
--- a/out/AppImageUpdater.js
+++ b/out/AppImageUpdater.js
@@ -29,7 +29,7 @@ class AppImageUpdater extends BaseUpdater_1.BaseUpdater {
     /*** @private */
     doDownloadUpdate(downloadUpdateOptions) {
         const provider = downloadUpdateOptions.updateInfoAndProvider.provider;
-        const fileInfo = (0, Provider_1.findFile)(provider.resolveFiles(downloadUpdateOptions.updateInfoAndProvider.info), "AppImage", ["rpm", "deb"]);
+        const fileInfo = (0, Provider_1.findFile)(provider.resolveFiles(downloadUpdateOptions.updateInfoAndProvider.info), "AppImage", ["rpm", "deb", "pacman"]);
         return this.executeDownload({
             fileExtension: "AppImage",
             fileInfo,
diff --git a/out/DebUpdater.js b/out/DebUpdater.js
index 422f42fc0f026eb255cbfa79a5a75b6b3c1e7cf8..bd0c2e8cd67d030fc0efbb80f7d8127e0b9489c5 100644
--- a/out/DebUpdater.js
+++ b/out/DebUpdater.js
@@ -11,7 +11,7 @@ class DebUpdater extends BaseUpdater_1.BaseUpdater {
     /*** @private */
     doDownloadUpdate(downloadUpdateOptions) {
         const provider = downloadUpdateOptions.updateInfoAndProvider.provider;
-        const fileInfo = (0, Provider_1.findFile)(provider.resolveFiles(downloadUpdateOptions.updateInfoAndProvider.info), "deb", ["AppImage", "rpm"]);
+        const fileInfo = (0, Provider_1.findFile)(provider.resolveFiles(downloadUpdateOptions.updateInfoAndProvider.info), "deb", ["AppImage", "rpm", "pacman"]);
         return this.executeDownload({
             fileExtension: "deb",
             fileInfo,
diff --git a/out/PacmanUpdater.js b/out/PacmanUpdater.js
new file mode 100644
index 0000000000000000000000000000000000000000..6cd13013cfb15b38ed12e58b5b8b4c9f322b6da6
--- /dev/null
+++ b/out/PacmanUpdater.js
@@ -0,0 +1,40 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.DebUpdater = void 0;
+const BaseUpdater_1 = require("./BaseUpdater");
+const main_1 = require("./main");
+const Provider_1 = require("./providers/Provider");
+class PacmanUpdater extends BaseUpdater_1.BaseUpdater {
+    constructor(options, app) {
+        super(options, app);
+    }
+    /*** @private */
+    doDownloadUpdate(downloadUpdateOptions) {
+        const provider = downloadUpdateOptions.updateInfoAndProvider.provider;
+        const fileInfo = (0, Provider_1.findFile)(provider.resolveFiles(downloadUpdateOptions.updateInfoAndProvider.info), "pacman", ["AppImage", "rpm", "deb"]);
+        return this.executeDownload({
+            fileExtension: "pacman",
+            fileInfo,
+            downloadUpdateOptions,
+            task: async (updateFile, downloadOptions) => {
+                if (this.listenerCount(main_1.DOWNLOAD_PROGRESS) > 0) {
+                    downloadOptions.onProgress = it => this.emit(main_1.DOWNLOAD_PROGRESS, it);
+                }
+                await this.httpExecutor.download(fileInfo.url, updateFile, downloadOptions);
+            },
+        });
+    }
+    doInstall(options) {
+        const sudo = this.wrapSudo();
+        // pkexec doesn't want the command to be wrapped in " quotes
+        const wrapper = /pkexec/i.test(sudo) ? "" : `"`;
+        const cmd = ["pacman", "-U", "--noconfirm", options.installerPath];
+        this.spawnSyncLog(sudo, [`${wrapper}/bin/bash`, "-c", `'${cmd.join(" ")}'${wrapper}`]);
+        if (options.isForceRunAfter) {
+            this.app.relaunch();
+        }
+        return true;
+    }
+}
+exports.PacmanUpdater = PacmanUpdater;
+//# sourceMappingURL=PacmanUpdater.js.map
\ No newline at end of file
diff --git a/out/RpmUpdater.js b/out/RpmUpdater.js
index 32fb0ff7cdedd602c865e567e38c24846fe16a52..0154c307af13be29f5edcf40d97389823d44cb2a 100644
--- a/out/RpmUpdater.js
+++ b/out/RpmUpdater.js
@@ -11,7 +11,7 @@ class RpmUpdater extends BaseUpdater_1.BaseUpdater {
     /*** @private */
     doDownloadUpdate(downloadUpdateOptions) {
         const provider = downloadUpdateOptions.updateInfoAndProvider.provider;
-        const fileInfo = (0, Provider_1.findFile)(provider.resolveFiles(downloadUpdateOptions.updateInfoAndProvider.info), "rpm", ["AppImage", "deb"]);
+        const fileInfo = (0, Provider_1.findFile)(provider.resolveFiles(downloadUpdateOptions.updateInfoAndProvider.info), "rpm", ["AppImage", "deb", "pacman"]);
         return this.executeDownload({
             fileExtension: "rpm",
             fileInfo,
diff --git a/out/main.js b/out/main.js
index 7be5e04d12dedaa4e4c7c09b9f7c1f034d381231..2ac6c1ed6bb5a93753605a656ccdcadb04fea6f4 100644
--- a/out/main.js
+++ b/out/main.js
@@ -49,7 +49,11 @@ function doLoadAutoUpdater() {
                 case "rpm":
                     _autoUpdater = new (require("./RpmUpdater").RpmUpdater)();
                     break;
+                case "pacman":
+                    _autoUpdater = new (require("./PacmanUpdater").PacmanUpdater)();
+                    break;
                 default:
+                    console.log("Auto-updates are not supported on this package-type: ", fileType)
                     break;
             }
         }
